const getTemplate=(e=[],t,s)=>{let l=t??"По умолчанию";const i=e.map(e=>{let t="";return e.id===s&&(l=e.value,t="selected"),`\n         <li class="select__item ${t}" data-type="item" data-id="${e.id}">${e.value}</li>\n      `});return`\n   <div class="select__input" data-type="input">\n      <img src="img/world.svg" alt="earth" class="icon__earth" />\n      <span data-type="value">${l}</span>\n      <img src="img/arrow.svg" alt="arrow" class="icon__arrow" data-type="arrow"/>\n   </div>\n   <div class="select__dropdown">\n      <ol class="select__list">\n         ${i.join("")}\n      </ol>\n   </div>\n `};class Select{constructor(e,t){this.$el=document.querySelector(e),this.options=t,this.selectedId=t.selectedId,this.render(),this.setup()}render(){const{placeholder:e,data:t}=this.options;this.$el.classList.add("select"),this.$el.innerHTML=getTemplate(t,e,this.selectedId)}setup(){this.clickHendler=this.clickHendler.bind(this),this.$el.addEventListener("click",this.clickHendler),this.$arrow=this.$el.querySelector('[data-type = "arrow"]'),this.$value=this.$el.querySelector('[data-type = "value"]')}clickHendler(e){const{type:t}=e.target.dataset;if("input"===t||"input"===e.target.parentNode.dataset.type)this.toggle();else if("item"===t){const t=e.target.dataset.id;this.select(t)}}get isOpen(){return this.$el.classList.contains("open")}get current(){return this.options.data.find(e=>e.id===this.selectedId)}select(e){this.selectedId=e,this.$value.textContent=this.current.value,this.$el.querySelectorAll('[data-type="item"]').forEach(e=>{e.classList.remove("selected")}),this.$el.querySelector(`[data-id="${e}"]`).classList.add("selected"),this.close()}toggle(){this.isOpen?this.close():this.open()}open(){this.$el.classList.add("open"),this.$arrow.style.transform="rotate(180deg)"}close(){this.$el.classList.remove("open"),this.$arrow.style.transform="rotate(360deg)"}}const select=new Select("#select",{placeholder:"Русский",selectedId:"0",data:[{id:"1",value:"Русский"},{id:"2",value:"Украинский"},{id:"3",value:"English"}]});